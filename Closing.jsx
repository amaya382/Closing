(function(){	var doc = activeDocument;	var msg = "\n";	var err = (function(){		var _deleteMsg = "□ 非表示要素の一部または全部が削除されていません\n\n";		var _outlineMsg = "□ アウトライン化が行われていません\n\n";		var _mergeMsg = "□ レイヤー統合が行われていません\n\n";		return {			deleteMsg : (function(){				return _deleteMsg;			})(),			outlineMsg : (function(){				return _outlineMsg;			})(),			mergeMsg : (function(){				return _mergeMsg;			})()		};	})();	modCond(doc, false);	try{		msg += checkPlacedItem(doc);	}catch(ex){		alert("埋め込めない画像が見つかりました.\n処理を中断します.");		modCond(doc, true);		return;	}	try{		msg += deleteUnneeded(doc);	}catch(ex){		alert(msg + err.deleteMsg + err.outlineMsg + err.mergeMsg);		alert("ERROR:\n" + ex);		return;	}	try{		msg += outline(doc);	}catch(ex){		alert(msg + err.outlineMsg + err.mergeMsg);		alert("ERROR:\n" + ex);		return;	}	try{		msg += mergeLayers(doc);	}catch(ex){		alert(msg + err.mergeMsg);		alert("ERROR:\n" + ex);	}	try{		modCond(doc, true);		var name = saveAs(doc);		alert(msg +			"すべての処理が完了しました.\n\"" + name + "\" として保存しました");	}catch(ex){		alert(msg +			"すべての処理が完了しましたが, 別名保存に失敗しました.\nこのスクリプトを実行する前に既に名前をつけて保存されていることを確認し再度実行してください.");		alert("ERROR:\n" + ex);	}	//レイヤーのロック状態を変更します	function modCond(target, cond){		for(var i = target.layers.length - 1; i >= 0; i--)			target.layers[i].locked = cond;	}	//リンク画像をチェックして, 埋め込み処理を行います	function checkPlacedItem(target){		var placedItems = target.placedItems;		if(placedItems.length > 0){			if(confirm("リンク画像が見つかりました.\n埋め込みますか？")){				for(var i = placedItems.length; i > 0; i--)					placedItems[0].embed();				return "☑ リンク画像をすべて埋め込みました\n\n";			}else				return "□ リンク画像を埋め込みませんでした\n\n";		}else			return "☑ リンク画像はありませんでした\n\n";	}	//不要なアイテムやレイヤーを削除します	function deleteUnneeded(target){		var deletedItemCount = deleteUnvisiblePageItems(doc);		var deletedULayerCount = deleteUnvisibleLayers(doc, 0);		var deletedNILayerCount = deleteNoItemLayers(doc, 0);		if(deletedItemCount === 0 && deletedULayerCount === 0 && deletedNILayerCount === 0)			return "☑ 非表示要素はありませんでした\n\n";		else			return "☑ 非表示要素の削除(削除数は目安)\n * " +				deletedItemCount + "個の非表示アイテム\n * " +				deletedULayerCount + "個の非表示レイヤー\n * " +				deletedNILayerCount + "個の空レイヤー\nを削除しました\n\n";		//すべての非表示オブジェクトを削除します		function deleteUnvisiblePageItems(target){			var items = target.pageItems;			var count = 0;			for(var i = items.length - 1; i >= 0; i--) {				var item = items[i];				if(item.hidden){					item.remove();					count++;				}			}			return count;		}		//非表示レイヤーを再帰的に削除します		function deleteUnvisibleLayers(target, count){			for(var i = target.layers.length - 1; i >= 0; i--){				var layer = target.layers[i];				if(!layer.visible){					layer.visible = true;					layer.locked = false;					layer.remove();					count++;				}else{					// 下の階層もチェック（再帰）					count = deleteUnvisibleLayers(layer, count);				}			}			return count;		}		//空レイヤーを再帰的に削除します		function deleteNoItemLayers(target, count){			for (var i = target.layers.length - 1; i >= 0; i--){				var layer = target.layers[i];				if (layer.layers.length === 0){					if (layer.pageItems.length === 0){						layer.visible = true;						layer.locked = false;						layer.remove();						count++;					}				}else{					// 下の階層もチェック（再帰）					count = deleteNoItemLayers(layer, count);				}			}			return count;		}	}	//テキストオブジェクトをアウトライン化します	function outline(target){		var textItems = target.textFrames;		if(textItems.length > 0){			for(var i = textItems.length; i > 0; i--){				var textItem = textItems[0];				textItem.locked = false;				textItem.createOutline();			}			return "☑ アウトライン化を行いました\n\n";		}else			return "☑ アウトライン化の必要はありませんでした\n\n";	}	//すべてのレイヤーを統合します	function mergeLayers(target){		if(target.layers.length < 2)			return "☑ レイヤーの統合の必要はありませんでした\n\n";		var baseLayer = target.layers[0];		for(var i = target.layers.length - 1; i > 0; i--){			var layer = target.layers[1];			var items = layer.pageItems;			if(items.length > 0){				for(var j = items.length; j > 0; j--)					items[0].moveToEnd(baseLayer);			}			layer.remove();		}		baseLayer.name = "unifiedLayer";		return "☑ レイヤーを統合しました\n\n";	}	//別名で保存します	function saveAs(target){		var opt = new IllustratorSaveOptions();		opt.compatibility = Compatibility.ILLUSTRATOR14;//cs4		opt.fontSubsetThreshold = 100;		opt.pdfCompatible = true;		opt.embedICCProfile　= false;		opt.compressed = false;		opt.flattenOutput = OutputFlattening.PRESERVEAPPEARANCE;		opt.overprint = PDFOverprint.PRESERVEPDFOVERPRINT;		var ext = ".ai";		var suffix = "_ol" + ext;		var orgName = target.name;		var name = orgName.substring(0, orgName.lastIndexOf(".")) +				(orgName.lastIndexOf(suffix) == orgName.length - suffix.length ? ext : suffix);		var fullName = target.path + "/" + name;		target.saveAs(new File(fullName), opt);		return name;	}})();